-- Create teachers table
CREATE TABLE IF NOT EXISTS "public"."teachers" (
    "teacher_id" bigint NOT NULL,
    "first_name" character varying NOT NULL,
    "last_name" character varying,
    "email" text NOT NULL,
    "user_id" uuid,
    CONSTRAINT "teachers_pkey" PRIMARY KEY ("teacher_id")
);

ALTER TABLE "public"."teachers" ALTER COLUMN "teacher_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."teachers_teacher_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Add teacher_id and classroom_id to students table
ALTER TABLE "public"."students" 
    ADD COLUMN IF NOT EXISTS "teacher_id" bigint,
    ADD COLUMN IF NOT EXISTS "classroom_id" bigint,
    ADD CONSTRAINT "students_teacher_id_fkey" FOREIGN KEY ("teacher_id") REFERENCES "public"."teachers"("teacher_id"),
    ADD CONSTRAINT "students_classroom_id_fkey" FOREIGN KEY ("classroom_id") REFERENCES "public"."Classroom"("classroom_id");

-- Add RLS policies for teachers table
ALTER TABLE "public"."teachers" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Teachers can view their own data" ON "public"."teachers" FOR SELECT TO "authenticated" USING ("user_id" = auth.uid());

CREATE POLICY "Teachers can update their own data" ON "public"."teachers" FOR UPDATE TO "authenticated" USING ("user_id" = auth.uid());

CREATE POLICY "Teachers can create their own record" ON "public"."teachers" FOR INSERT TO "authenticated" WITH CHECK ("user_id" = auth.uid());

CREATE POLICY "Admins can manage all teachers" ON "public"."teachers" FOR ALL TO "authenticated" USING (
    EXISTS (
        SELECT 1 FROM public.profiles
        WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
    )
);

-- Add RLS policies for students table
ALTER TABLE "public"."students" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Students can view their own data" ON "public"."students" FOR SELECT TO "authenticated" USING ("user_id" = auth.uid());

CREATE POLICY "Students can update their own data" ON "public"."students" FOR UPDATE TO "authenticated" USING ("user_id" = auth.uid());

CREATE POLICY "Students can create their own record" ON "public"."students" FOR INSERT TO "authenticated" WITH CHECK ("user_id" = auth.uid());

CREATE POLICY "Teachers can view their students" ON "public"."students" FOR SELECT TO "authenticated" USING (
    EXISTS (
        SELECT 1 FROM public.teachers
        WHERE teachers.teacher_id = students.teacher_id
        AND teachers.user_id = auth.uid()
    )
);

CREATE POLICY "Teachers can manage their students" ON "public"."students" FOR ALL TO "authenticated" USING (
    EXISTS (
        SELECT 1 FROM public.teachers
        WHERE teachers.teacher_id = students.teacher_id
        AND teachers.user_id = auth.uid()
    )
);

CREATE POLICY "Admins can manage all students" ON "public"."students" FOR ALL TO "authenticated" USING (
    EXISTS (
        SELECT 1 FROM public.profiles
        WHERE profiles.id = auth.uid() AND profiles.role = 'admin'
    )
);
